# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_compat', [dirname(__file__)])
        except ImportError:
            import _compat
            return _compat
        if fp is not None:
            try:
                _mod = imp.load_module('_compat', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _compat = swig_import_helper()
    del swig_import_helper
else:
    import _compat
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _compat.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self, *args): return _compat.SwigPyIterator_value(self, *args)
    def incr(self, *args): return _compat.SwigPyIterator_incr(self, *args)
    def decr(self, *args): return _compat.SwigPyIterator_decr(self, *args)
    def distance(self, *args): return _compat.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _compat.SwigPyIterator_equal(self, *args)
    def copy(self, *args): return _compat.SwigPyIterator_copy(self, *args)
    def next(self, *args): return _compat.SwigPyIterator_next(self, *args)
    def __next__(self, *args): return _compat.SwigPyIterator___next__(self, *args)
    def previous(self, *args): return _compat.SwigPyIterator_previous(self, *args)
    def advance(self, *args): return _compat.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _compat.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _compat.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _compat.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _compat.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _compat.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _compat.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _compat.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vector_unsigned_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_unsigned_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_unsigned_int, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_unsigned_int_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_unsigned_int___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_unsigned_int___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_unsigned_int___len__(self, *args)
    def pop(self, *args): return _compat.vector_unsigned_int_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_unsigned_int___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_unsigned_int___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_unsigned_int___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_unsigned_int___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_unsigned_int___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_unsigned_int___setitem__(self, *args)
    def append(self, *args): return _compat.vector_unsigned_int_append(self, *args)
    def empty(self, *args): return _compat.vector_unsigned_int_empty(self, *args)
    def size(self, *args): return _compat.vector_unsigned_int_size(self, *args)
    def clear(self, *args): return _compat.vector_unsigned_int_clear(self, *args)
    def swap(self, *args): return _compat.vector_unsigned_int_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_unsigned_int_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_unsigned_int_begin(self, *args)
    def end(self, *args): return _compat.vector_unsigned_int_end(self, *args)
    def rbegin(self, *args): return _compat.vector_unsigned_int_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_unsigned_int_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_unsigned_int_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_unsigned_int_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_unsigned_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_unsigned_int_push_back(self, *args)
    def front(self, *args): return _compat.vector_unsigned_int_front(self, *args)
    def back(self, *args): return _compat.vector_unsigned_int_back(self, *args)
    def assign(self, *args): return _compat.vector_unsigned_int_assign(self, *args)
    def resize(self, *args): return _compat.vector_unsigned_int_resize(self, *args)
    def insert(self, *args): return _compat.vector_unsigned_int_insert(self, *args)
    def reserve(self, *args): return _compat.vector_unsigned_int_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_unsigned_int_capacity(self, *args)
    __swig_destroy__ = _compat.delete_vector_unsigned_int
    __del__ = lambda self : None;
vector_unsigned_int_swigregister = _compat.vector_unsigned_int_swigregister
vector_unsigned_int_swigregister(vector_unsigned_int)

class vector_vector_unsigned_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vector_unsigned_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vector_unsigned_int, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_vector_unsigned_int_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_vector_unsigned_int___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_vector_unsigned_int___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_vector_unsigned_int___len__(self, *args)
    def pop(self, *args): return _compat.vector_vector_unsigned_int_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_vector_unsigned_int___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_vector_unsigned_int___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_vector_unsigned_int___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_vector_unsigned_int___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_vector_unsigned_int___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_vector_unsigned_int___setitem__(self, *args)
    def append(self, *args): return _compat.vector_vector_unsigned_int_append(self, *args)
    def empty(self, *args): return _compat.vector_vector_unsigned_int_empty(self, *args)
    def size(self, *args): return _compat.vector_vector_unsigned_int_size(self, *args)
    def clear(self, *args): return _compat.vector_vector_unsigned_int_clear(self, *args)
    def swap(self, *args): return _compat.vector_vector_unsigned_int_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_vector_unsigned_int_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_vector_unsigned_int_begin(self, *args)
    def end(self, *args): return _compat.vector_vector_unsigned_int_end(self, *args)
    def rbegin(self, *args): return _compat.vector_vector_unsigned_int_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_vector_unsigned_int_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_vector_unsigned_int_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_vector_unsigned_int_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_vector_unsigned_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_vector_unsigned_int_push_back(self, *args)
    def front(self, *args): return _compat.vector_vector_unsigned_int_front(self, *args)
    def back(self, *args): return _compat.vector_vector_unsigned_int_back(self, *args)
    def assign(self, *args): return _compat.vector_vector_unsigned_int_assign(self, *args)
    def resize(self, *args): return _compat.vector_vector_unsigned_int_resize(self, *args)
    def insert(self, *args): return _compat.vector_vector_unsigned_int_insert(self, *args)
    def reserve(self, *args): return _compat.vector_vector_unsigned_int_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_vector_unsigned_int_capacity(self, *args)
    __swig_destroy__ = _compat.delete_vector_vector_unsigned_int
    __del__ = lambda self : None;
vector_vector_unsigned_int_swigregister = _compat.vector_vector_unsigned_int_swigregister
vector_vector_unsigned_int_swigregister(vector_vector_unsigned_int)

class vector_char(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_char, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_char_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_char___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_char___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_char___len__(self, *args)
    def pop(self, *args): return _compat.vector_char_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_char___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_char___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_char___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_char___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_char___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_char___setitem__(self, *args)
    def append(self, *args): return _compat.vector_char_append(self, *args)
    def empty(self, *args): return _compat.vector_char_empty(self, *args)
    def size(self, *args): return _compat.vector_char_size(self, *args)
    def clear(self, *args): return _compat.vector_char_clear(self, *args)
    def swap(self, *args): return _compat.vector_char_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_char_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_char_begin(self, *args)
    def end(self, *args): return _compat.vector_char_end(self, *args)
    def rbegin(self, *args): return _compat.vector_char_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_char_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_char_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_char_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_char(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_char_push_back(self, *args)
    def front(self, *args): return _compat.vector_char_front(self, *args)
    def back(self, *args): return _compat.vector_char_back(self, *args)
    def assign(self, *args): return _compat.vector_char_assign(self, *args)
    def resize(self, *args): return _compat.vector_char_resize(self, *args)
    def insert(self, *args): return _compat.vector_char_insert(self, *args)
    def reserve(self, *args): return _compat.vector_char_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_char_capacity(self, *args)
    def count(self, *args): return _compat.vector_char_count(self, *args)
    __swig_destroy__ = _compat.delete_vector_char
    __del__ = lambda self : None;
vector_char_swigregister = _compat.vector_char_swigregister
vector_char_swigregister(vector_char)

class vector_string(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_string, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_string, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_string_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_string___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_string___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_string___len__(self, *args)
    def pop(self, *args): return _compat.vector_string_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_string___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_string___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_string___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_string___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_string___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_string___setitem__(self, *args)
    def append(self, *args): return _compat.vector_string_append(self, *args)
    def empty(self, *args): return _compat.vector_string_empty(self, *args)
    def size(self, *args): return _compat.vector_string_size(self, *args)
    def clear(self, *args): return _compat.vector_string_clear(self, *args)
    def swap(self, *args): return _compat.vector_string_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_string_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_string_begin(self, *args)
    def end(self, *args): return _compat.vector_string_end(self, *args)
    def rbegin(self, *args): return _compat.vector_string_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_string_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_string_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_string_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_string(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_string_push_back(self, *args)
    def front(self, *args): return _compat.vector_string_front(self, *args)
    def back(self, *args): return _compat.vector_string_back(self, *args)
    def assign(self, *args): return _compat.vector_string_assign(self, *args)
    def resize(self, *args): return _compat.vector_string_resize(self, *args)
    def insert(self, *args): return _compat.vector_string_insert(self, *args)
    def reserve(self, *args): return _compat.vector_string_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_string_capacity(self, *args)
    __swig_destroy__ = _compat.delete_vector_string
    __del__ = lambda self : None;
vector_string_swigregister = _compat.vector_string_swigregister
vector_string_swigregister(vector_string)

class vector_vector_char(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_vector_char, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_vector_char, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_vector_char_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_vector_char___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_vector_char___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_vector_char___len__(self, *args)
    def pop(self, *args): return _compat.vector_vector_char_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_vector_char___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_vector_char___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_vector_char___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_vector_char___delitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_vector_char___setitem__(self, *args)
    def append(self, *args): return _compat.vector_vector_char_append(self, *args)
    def empty(self, *args): return _compat.vector_vector_char_empty(self, *args)
    def size(self, *args): return _compat.vector_vector_char_size(self, *args)
    def clear(self, *args): return _compat.vector_vector_char_clear(self, *args)
    def swap(self, *args): return _compat.vector_vector_char_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_vector_char_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_vector_char_begin(self, *args)
    def end(self, *args): return _compat.vector_vector_char_end(self, *args)
    def rbegin(self, *args): return _compat.vector_vector_char_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_vector_char_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_vector_char_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_vector_char_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_vector_char(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_vector_char_push_back(self, *args)
    def front(self, *args): return _compat.vector_vector_char_front(self, *args)
    def back(self, *args): return _compat.vector_vector_char_back(self, *args)
    def assign(self, *args): return _compat.vector_vector_char_assign(self, *args)
    def resize(self, *args): return _compat.vector_vector_char_resize(self, *args)
    def insert(self, *args): return _compat.vector_vector_char_insert(self, *args)
    def reserve(self, *args): return _compat.vector_vector_char_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_vector_char_capacity(self, *args)
    def __getitem__(self, *args): return _compat.vector_vector_char___getitem__(self, *args)
    __swig_destroy__ = _compat.delete_vector_vector_char
    __del__ = lambda self : None;
vector_vector_char_swigregister = _compat.vector_vector_char_swigregister
vector_vector_char_swigregister(vector_vector_char)

class pair_unsigned_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_unsigned_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_unsigned_int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _compat.new_pair_unsigned_int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _compat.pair_unsigned_int_first_set
    __swig_getmethods__["first"] = _compat.pair_unsigned_int_first_get
    if _newclass:first = _swig_property(_compat.pair_unsigned_int_first_get, _compat.pair_unsigned_int_first_set)
    __swig_setmethods__["second"] = _compat.pair_unsigned_int_second_set
    __swig_getmethods__["second"] = _compat.pair_unsigned_int_second_get
    if _newclass:second = _swig_property(_compat.pair_unsigned_int_second_get, _compat.pair_unsigned_int_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _compat.delete_pair_unsigned_int
    __del__ = lambda self : None;
pair_unsigned_int_swigregister = _compat.pair_unsigned_int_swigregister
pair_unsigned_int_swigregister(pair_unsigned_int)

class vector_pair_unsigned_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_pair_unsigned_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_pair_unsigned_int, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_pair_unsigned_int_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_pair_unsigned_int___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_pair_unsigned_int___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_pair_unsigned_int___len__(self, *args)
    def pop(self, *args): return _compat.vector_pair_unsigned_int_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_pair_unsigned_int___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_pair_unsigned_int___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_pair_unsigned_int___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_pair_unsigned_int___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_pair_unsigned_int___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_pair_unsigned_int___setitem__(self, *args)
    def append(self, *args): return _compat.vector_pair_unsigned_int_append(self, *args)
    def empty(self, *args): return _compat.vector_pair_unsigned_int_empty(self, *args)
    def size(self, *args): return _compat.vector_pair_unsigned_int_size(self, *args)
    def clear(self, *args): return _compat.vector_pair_unsigned_int_clear(self, *args)
    def swap(self, *args): return _compat.vector_pair_unsigned_int_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_pair_unsigned_int_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_pair_unsigned_int_begin(self, *args)
    def end(self, *args): return _compat.vector_pair_unsigned_int_end(self, *args)
    def rbegin(self, *args): return _compat.vector_pair_unsigned_int_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_pair_unsigned_int_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_pair_unsigned_int_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_pair_unsigned_int_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_pair_unsigned_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_pair_unsigned_int_push_back(self, *args)
    def front(self, *args): return _compat.vector_pair_unsigned_int_front(self, *args)
    def back(self, *args): return _compat.vector_pair_unsigned_int_back(self, *args)
    def assign(self, *args): return _compat.vector_pair_unsigned_int_assign(self, *args)
    def resize(self, *args): return _compat.vector_pair_unsigned_int_resize(self, *args)
    def insert(self, *args): return _compat.vector_pair_unsigned_int_insert(self, *args)
    def reserve(self, *args): return _compat.vector_pair_unsigned_int_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_pair_unsigned_int_capacity(self, *args)
    __swig_destroy__ = _compat.delete_vector_pair_unsigned_int
    __del__ = lambda self : None;
vector_pair_unsigned_int_swigregister = _compat.vector_pair_unsigned_int_swigregister
vector_pair_unsigned_int_swigregister(vector_pair_unsigned_int)

class pair_vector_unsigned_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_vector_unsigned_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_vector_unsigned_int, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _compat.new_pair_vector_unsigned_int(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["first"] = _compat.pair_vector_unsigned_int_first_set
    __swig_getmethods__["first"] = _compat.pair_vector_unsigned_int_first_get
    if _newclass:first = _swig_property(_compat.pair_vector_unsigned_int_first_get, _compat.pair_vector_unsigned_int_first_set)
    __swig_setmethods__["second"] = _compat.pair_vector_unsigned_int_second_set
    __swig_getmethods__["second"] = _compat.pair_vector_unsigned_int_second_get
    if _newclass:second = _swig_property(_compat.pair_vector_unsigned_int_second_get, _compat.pair_vector_unsigned_int_second_set)
    def __len__(self): return 2
    def __repr__(self): return str((self.first, self.second))
    def __getitem__(self, index): 
      if not (index % 2): 
        return self.first
      else:
        return self.second
    def __setitem__(self, index, val):
      if not (index % 2): 
        self.first = val
      else:
        self.second = val
    __swig_destroy__ = _compat.delete_pair_vector_unsigned_int
    __del__ = lambda self : None;
pair_vector_unsigned_int_swigregister = _compat.pair_vector_unsigned_int_swigregister
pair_vector_unsigned_int_swigregister(pair_vector_unsigned_int)

class vector_pair_vector_unsigned_int(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_pair_vector_unsigned_int, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_pair_vector_unsigned_int, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_pair_vector_unsigned_int_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_pair_vector_unsigned_int___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_pair_vector_unsigned_int___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_pair_vector_unsigned_int___len__(self, *args)
    def pop(self, *args): return _compat.vector_pair_vector_unsigned_int_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_pair_vector_unsigned_int___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_pair_vector_unsigned_int___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_pair_vector_unsigned_int___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_pair_vector_unsigned_int___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_pair_vector_unsigned_int___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_pair_vector_unsigned_int___setitem__(self, *args)
    def append(self, *args): return _compat.vector_pair_vector_unsigned_int_append(self, *args)
    def empty(self, *args): return _compat.vector_pair_vector_unsigned_int_empty(self, *args)
    def size(self, *args): return _compat.vector_pair_vector_unsigned_int_size(self, *args)
    def clear(self, *args): return _compat.vector_pair_vector_unsigned_int_clear(self, *args)
    def swap(self, *args): return _compat.vector_pair_vector_unsigned_int_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_pair_vector_unsigned_int_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_pair_vector_unsigned_int_begin(self, *args)
    def end(self, *args): return _compat.vector_pair_vector_unsigned_int_end(self, *args)
    def rbegin(self, *args): return _compat.vector_pair_vector_unsigned_int_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_pair_vector_unsigned_int_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_pair_vector_unsigned_int_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_pair_vector_unsigned_int_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_pair_vector_unsigned_int(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_pair_vector_unsigned_int_push_back(self, *args)
    def front(self, *args): return _compat.vector_pair_vector_unsigned_int_front(self, *args)
    def back(self, *args): return _compat.vector_pair_vector_unsigned_int_back(self, *args)
    def assign(self, *args): return _compat.vector_pair_vector_unsigned_int_assign(self, *args)
    def resize(self, *args): return _compat.vector_pair_vector_unsigned_int_resize(self, *args)
    def insert(self, *args): return _compat.vector_pair_vector_unsigned_int_insert(self, *args)
    def reserve(self, *args): return _compat.vector_pair_vector_unsigned_int_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_pair_vector_unsigned_int_capacity(self, *args)
    __swig_destroy__ = _compat.delete_vector_pair_vector_unsigned_int
    __del__ = lambda self : None;
vector_pair_vector_unsigned_int_swigregister = _compat.vector_pair_vector_unsigned_int_swigregister
vector_pair_vector_unsigned_int_swigregister(vector_pair_vector_unsigned_int)

class set_unsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, set_unsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, set_unsigned, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.set_unsigned_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.set_unsigned___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.set_unsigned___bool__(self, *args)
    def __len__(self, *args): return _compat.set_unsigned___len__(self, *args)
    def append(self, *args): return _compat.set_unsigned_append(self, *args)
    def __contains__(self, *args): return _compat.set_unsigned___contains__(self, *args)
    def __getitem__(self, *args): return _compat.set_unsigned___getitem__(self, *args)
    def add(self, *args): return _compat.set_unsigned_add(self, *args)
    def discard(self, *args): return _compat.set_unsigned_discard(self, *args)
    def __init__(self, *args): 
        this = _compat.new_set_unsigned(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self, *args): return _compat.set_unsigned_empty(self, *args)
    def size(self, *args): return _compat.set_unsigned_size(self, *args)
    def clear(self, *args): return _compat.set_unsigned_clear(self, *args)
    def swap(self, *args): return _compat.set_unsigned_swap(self, *args)
    def count(self, *args): return _compat.set_unsigned_count(self, *args)
    def begin(self, *args): return _compat.set_unsigned_begin(self, *args)
    def end(self, *args): return _compat.set_unsigned_end(self, *args)
    def rbegin(self, *args): return _compat.set_unsigned_rbegin(self, *args)
    def rend(self, *args): return _compat.set_unsigned_rend(self, *args)
    def erase(self, *args): return _compat.set_unsigned_erase(self, *args)
    def find(self, *args): return _compat.set_unsigned_find(self, *args)
    def lower_bound(self, *args): return _compat.set_unsigned_lower_bound(self, *args)
    def upper_bound(self, *args): return _compat.set_unsigned_upper_bound(self, *args)
    def equal_range(self, *args): return _compat.set_unsigned_equal_range(self, *args)
    def insert(self, *args): return _compat.set_unsigned_insert(self, *args)
    __swig_destroy__ = _compat.delete_set_unsigned
    __del__ = lambda self : None;
set_unsigned_swigregister = _compat.set_unsigned_swigregister
set_unsigned_swigregister(set_unsigned)

class vector_set_unsigned(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_set_unsigned, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_set_unsigned, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_set_unsigned_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_set_unsigned___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_set_unsigned___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_set_unsigned___len__(self, *args)
    def pop(self, *args): return _compat.vector_set_unsigned_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_set_unsigned___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_set_unsigned___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_set_unsigned___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_set_unsigned___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_set_unsigned___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_set_unsigned___setitem__(self, *args)
    def append(self, *args): return _compat.vector_set_unsigned_append(self, *args)
    def empty(self, *args): return _compat.vector_set_unsigned_empty(self, *args)
    def size(self, *args): return _compat.vector_set_unsigned_size(self, *args)
    def clear(self, *args): return _compat.vector_set_unsigned_clear(self, *args)
    def swap(self, *args): return _compat.vector_set_unsigned_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_set_unsigned_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_set_unsigned_begin(self, *args)
    def end(self, *args): return _compat.vector_set_unsigned_end(self, *args)
    def rbegin(self, *args): return _compat.vector_set_unsigned_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_set_unsigned_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_set_unsigned_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_set_unsigned_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_set_unsigned(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_set_unsigned_push_back(self, *args)
    def front(self, *args): return _compat.vector_set_unsigned_front(self, *args)
    def back(self, *args): return _compat.vector_set_unsigned_back(self, *args)
    def assign(self, *args): return _compat.vector_set_unsigned_assign(self, *args)
    def resize(self, *args): return _compat.vector_set_unsigned_resize(self, *args)
    def insert(self, *args): return _compat.vector_set_unsigned_insert(self, *args)
    def reserve(self, *args): return _compat.vector_set_unsigned_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_set_unsigned_capacity(self, *args)
    __swig_destroy__ = _compat.delete_vector_set_unsigned
    __del__ = lambda self : None;
vector_set_unsigned_swigregister = _compat.vector_set_unsigned_swigregister
vector_set_unsigned_swigregister(vector_set_unsigned)

class SDynProgEl(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDynProgEl, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDynProgEl, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _compat.new_SDynProgEl(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_setmethods__["nodes"] = _compat.SDynProgEl_nodes_set
    __swig_getmethods__["nodes"] = _compat.SDynProgEl_nodes_get
    if _newclass:nodes = _swig_property(_compat.SDynProgEl_nodes_get, _compat.SDynProgEl_nodes_set)
    __swig_setmethods__["scores"] = _compat.SDynProgEl_scores_set
    __swig_getmethods__["scores"] = _compat.SDynProgEl_scores_get
    if _newclass:scores = _swig_property(_compat.SDynProgEl_scores_get, _compat.SDynProgEl_scores_set)
    __swig_setmethods__["children"] = _compat.SDynProgEl_children_set
    __swig_getmethods__["children"] = _compat.SDynProgEl_children_get
    if _newclass:children = _swig_property(_compat.SDynProgEl_children_get, _compat.SDynProgEl_children_set)
    __swig_destroy__ = _compat.delete_SDynProgEl
    __del__ = lambda self : None;
SDynProgEl_swigregister = _compat.SDynProgEl_swigregister
SDynProgEl_swigregister(SDynProgEl)

class SDynProg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SDynProg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SDynProg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["max_node"] = _compat.SDynProg_max_node_set
    __swig_getmethods__["max_node"] = _compat.SDynProg_max_node_get
    if _newclass:max_node = _swig_property(_compat.SDynProg_max_node_get, _compat.SDynProg_max_node_set)
    __swig_setmethods__["root"] = _compat.SDynProg_root_set
    __swig_getmethods__["root"] = _compat.SDynProg_root_get
    if _newclass:root = _swig_property(_compat.SDynProg_root_get, _compat.SDynProg_root_set)
    def __init__(self, *args): 
        this = _compat.new_SDynProg(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _compat.delete_SDynProg
    __del__ = lambda self : None;
SDynProg_swigregister = _compat.SDynProg_swigregister
SDynProg_swigregister(SDynProg)

class MaxClique(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MaxClique, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MaxClique, name)
    __repr__ = _swig_repr
    e_None = _compat.MaxClique_e_None
    e_Coloring = _compat.MaxClique_e_Coloring
    e_Dyn_prog = _compat.MaxClique_e_Dyn_prog
    def __init__(self, *args): 
        this = _compat.new_MaxClique(*args)
        try: self.this.append(this)
        except: self.this = this
    def Run(self, *args): return _compat.MaxClique_Run(self, *args)
    def Recurse(self, *args): return _compat.MaxClique_Recurse(self, *args)
    def Run2(self, *args): return _compat.MaxClique_Run2(self, *args)
    def Recurse2(self, *args): return _compat.MaxClique_Recurse2(self, *args)
    def FindAll(self, *args): return _compat.MaxClique_FindAll(self, *args)
    def RecurseFA(self, *args): return _compat.MaxClique_RecurseFA(self, *args)
    def RecurseFAColors(self, *args): return _compat.MaxClique_RecurseFAColors(self, *args)
    def HasCliqueOfWeight(self, *args): return _compat.MaxClique_HasCliqueOfWeight(self, *args)
    def RecurseHCoW(self, *args): return _compat.MaxClique_RecurseHCoW(self, *args)
    def GetMax(self, *args): return _compat.MaxClique_GetMax(self, *args)
    def SetReportMaxes(self, *args): return _compat.MaxClique_SetReportMaxes(self, *args)
    def SetReportProgress(self, *args): return _compat.MaxClique_SetReportProgress(self, *args)
    def SetUpperBoundType(self, *args): return _compat.MaxClique_SetUpperBoundType(self, *args)
    def SetColorings(self, *args): return _compat.MaxClique_SetColorings(self, *args)
    def SetDynProgs(self, *args): return _compat.MaxClique_SetDynProgs(self, *args)
    __swig_setmethods__["intersections"] = _compat.MaxClique_intersections_set
    __swig_getmethods__["intersections"] = _compat.MaxClique_intersections_get
    if _newclass:intersections = _swig_property(_compat.MaxClique_intersections_get, _compat.MaxClique_intersections_set)
    __swig_setmethods__["intersections_hist"] = _compat.MaxClique_intersections_hist_set
    __swig_getmethods__["intersections_hist"] = _compat.MaxClique_intersections_hist_get
    if _newclass:intersections_hist = _swig_property(_compat.MaxClique_intersections_hist_get, _compat.MaxClique_intersections_hist_set)
    __swig_setmethods__["pointless_intersections"] = _compat.MaxClique_pointless_intersections_set
    __swig_getmethods__["pointless_intersections"] = _compat.MaxClique_pointless_intersections_get
    if _newclass:pointless_intersections = _swig_property(_compat.MaxClique_pointless_intersections_get, _compat.MaxClique_pointless_intersections_set)
    __swig_setmethods__["ub_calls"] = _compat.MaxClique_ub_calls_set
    __swig_getmethods__["ub_calls"] = _compat.MaxClique_ub_calls_get
    if _newclass:ub_calls = _swig_property(_compat.MaxClique_ub_calls_get, _compat.MaxClique_ub_calls_set)
    __swig_destroy__ = _compat.delete_MaxClique
    __del__ = lambda self : None;
MaxClique_swigregister = _compat.MaxClique_swigregister
MaxClique_swigregister(MaxClique)


def Compatible(*args):
  return _compat.Compatible(*args)
Compatible = _compat.Compatible

def Conflicts(*args):
  return _compat.Conflicts(*args)
Conflicts = _compat.Conflicts

def Disambiguate(*args):
  return _compat.Disambiguate(*args)
Disambiguate = _compat.Disambiguate

def MutualDisambiguate(*args):
  return _compat.MutualDisambiguate(*args)
MutualDisambiguate = _compat.MutualDisambiguate

def IsSubset(*args):
  return _compat.IsSubset(*args)
IsSubset = _compat.IsSubset

def Disjoint(*args):
  return _compat.Disjoint(*args)
Disjoint = _compat.Disjoint

def JointlyExhaustive(*args):
  return _compat.JointlyExhaustive(*args)
JointlyExhaustive = _compat.JointlyExhaustive

def CannotConflict(*args):
  return _compat.CannotConflict(*args)
CannotConflict = _compat.CannotConflict

def ForceDisambiguation(*args):
  return _compat.ForceDisambiguation(*args)
ForceDisambiguation = _compat.ForceDisambiguation

def ColorUpperBound(*args):
  return _compat.ColorUpperBound(*args)
ColorUpperBound = _compat.ColorUpperBound

def ColorReduce(*args):
  return _compat.ColorReduce(*args)
ColorReduce = _compat.ColorReduce

def Color(*args):
  return _compat.Color(*args)
Color = _compat.Color

def Color2(*args):
  return _compat.Color2(*args)
Color2 = _compat.Color2

def DynProgUpperBound(*args):
  return _compat.DynProgUpperBound(*args)
DynProgUpperBound = _compat.DynProgUpperBound

def DynProgRecurse(*args):
  return _compat.DynProgRecurse(*args)
DynProgRecurse = _compat.DynProgRecurse

def Greedy(*args):
  return _compat.Greedy(*args)
Greedy = _compat.Greedy

def Preprocess(*args):
  return _compat.Preprocess(*args)
Preprocess = _compat.Preprocess

def DoNothing(*args):
  return _compat.DoNothing(*args)
DoNothing = _compat.DoNothing

def Union(*args):
  return _compat.Union(*args)
Union = _compat.Union

def AddConflicts(*args):
  return _compat.AddConflicts(*args)
AddConflicts = _compat.AddConflicts

def ReturnVector(*args):
  return _compat.ReturnVector(*args)
ReturnVector = _compat.ReturnVector

def PairwiseDisambiguateMore(*args):
  return _compat.PairwiseDisambiguateMore(*args)
PairwiseDisambiguateMore = _compat.PairwiseDisambiguateMore
class CInconsisExcept(Exception):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CInconsisExcept, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CInconsisExcept, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _compat.new_CInconsisExcept(*args)
        try: self.this.append(this)
        except: self.this = this
    def SetIdx1(self, *args): return _compat.CInconsisExcept_SetIdx1(self, *args)
    def SetIdx2(self, *args): return _compat.CInconsisExcept_SetIdx2(self, *args)
    def GetIdx1(self, *args): return _compat.CInconsisExcept_GetIdx1(self, *args)
    def GetIdx2(self, *args): return _compat.CInconsisExcept_GetIdx2(self, *args)
    def GetArg1(self, *args): return _compat.CInconsisExcept_GetArg1(self, *args)
    def GetArg2(self, *args): return _compat.CInconsisExcept_GetArg2(self, *args)
    __swig_destroy__ = _compat.delete_CInconsisExcept
    __del__ = lambda self : None;
CInconsisExcept_swigregister = _compat.CInconsisExcept_swigregister
CInconsisExcept_swigregister(CInconsisExcept)


def Zip(*args):
  return _compat.Zip(*args)
Zip = _compat.Zip
class vector_SDynProgEl_pntr(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_SDynProgEl_pntr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_SDynProgEl_pntr, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_SDynProgEl_pntr_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_SDynProgEl_pntr___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_SDynProgEl_pntr___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_SDynProgEl_pntr___len__(self, *args)
    def pop(self, *args): return _compat.vector_SDynProgEl_pntr_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_SDynProgEl_pntr___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_SDynProgEl_pntr___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_SDynProgEl_pntr___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_SDynProgEl_pntr___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_SDynProgEl_pntr___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_SDynProgEl_pntr___setitem__(self, *args)
    def append(self, *args): return _compat.vector_SDynProgEl_pntr_append(self, *args)
    def empty(self, *args): return _compat.vector_SDynProgEl_pntr_empty(self, *args)
    def size(self, *args): return _compat.vector_SDynProgEl_pntr_size(self, *args)
    def clear(self, *args): return _compat.vector_SDynProgEl_pntr_clear(self, *args)
    def swap(self, *args): return _compat.vector_SDynProgEl_pntr_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_SDynProgEl_pntr_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_SDynProgEl_pntr_begin(self, *args)
    def end(self, *args): return _compat.vector_SDynProgEl_pntr_end(self, *args)
    def rbegin(self, *args): return _compat.vector_SDynProgEl_pntr_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_SDynProgEl_pntr_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_SDynProgEl_pntr_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_SDynProgEl_pntr_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_SDynProgEl_pntr(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_SDynProgEl_pntr_push_back(self, *args)
    def front(self, *args): return _compat.vector_SDynProgEl_pntr_front(self, *args)
    def back(self, *args): return _compat.vector_SDynProgEl_pntr_back(self, *args)
    def assign(self, *args): return _compat.vector_SDynProgEl_pntr_assign(self, *args)
    def resize(self, *args): return _compat.vector_SDynProgEl_pntr_resize(self, *args)
    def insert(self, *args): return _compat.vector_SDynProgEl_pntr_insert(self, *args)
    def reserve(self, *args): return _compat.vector_SDynProgEl_pntr_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_SDynProgEl_pntr_capacity(self, *args)
    __swig_destroy__ = _compat.delete_vector_SDynProgEl_pntr
    __del__ = lambda self : None;
vector_SDynProgEl_pntr_swigregister = _compat.vector_SDynProgEl_pntr_swigregister
vector_SDynProgEl_pntr_swigregister(vector_SDynProgEl_pntr)

class vector_SDynProg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_SDynProg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_SDynProg, name)
    __repr__ = _swig_repr
    def iterator(self, *args): return _compat.vector_SDynProg_iterator(self, *args)
    def __iter__(self): return self.iterator()
    def __nonzero__(self, *args): return _compat.vector_SDynProg___nonzero__(self, *args)
    def __bool__(self, *args): return _compat.vector_SDynProg___bool__(self, *args)
    def __len__(self, *args): return _compat.vector_SDynProg___len__(self, *args)
    def pop(self, *args): return _compat.vector_SDynProg_pop(self, *args)
    def __getslice__(self, *args): return _compat.vector_SDynProg___getslice__(self, *args)
    def __setslice__(self, *args): return _compat.vector_SDynProg___setslice__(self, *args)
    def __delslice__(self, *args): return _compat.vector_SDynProg___delslice__(self, *args)
    def __delitem__(self, *args): return _compat.vector_SDynProg___delitem__(self, *args)
    def __getitem__(self, *args): return _compat.vector_SDynProg___getitem__(self, *args)
    def __setitem__(self, *args): return _compat.vector_SDynProg___setitem__(self, *args)
    def append(self, *args): return _compat.vector_SDynProg_append(self, *args)
    def empty(self, *args): return _compat.vector_SDynProg_empty(self, *args)
    def size(self, *args): return _compat.vector_SDynProg_size(self, *args)
    def clear(self, *args): return _compat.vector_SDynProg_clear(self, *args)
    def swap(self, *args): return _compat.vector_SDynProg_swap(self, *args)
    def get_allocator(self, *args): return _compat.vector_SDynProg_get_allocator(self, *args)
    def begin(self, *args): return _compat.vector_SDynProg_begin(self, *args)
    def end(self, *args): return _compat.vector_SDynProg_end(self, *args)
    def rbegin(self, *args): return _compat.vector_SDynProg_rbegin(self, *args)
    def rend(self, *args): return _compat.vector_SDynProg_rend(self, *args)
    def pop_back(self, *args): return _compat.vector_SDynProg_pop_back(self, *args)
    def erase(self, *args): return _compat.vector_SDynProg_erase(self, *args)
    def __init__(self, *args): 
        this = _compat.new_vector_SDynProg(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _compat.vector_SDynProg_push_back(self, *args)
    def front(self, *args): return _compat.vector_SDynProg_front(self, *args)
    def back(self, *args): return _compat.vector_SDynProg_back(self, *args)
    def assign(self, *args): return _compat.vector_SDynProg_assign(self, *args)
    def resize(self, *args): return _compat.vector_SDynProg_resize(self, *args)
    def insert(self, *args): return _compat.vector_SDynProg_insert(self, *args)
    def reserve(self, *args): return _compat.vector_SDynProg_reserve(self, *args)
    def capacity(self, *args): return _compat.vector_SDynProg_capacity(self, *args)
    __swig_destroy__ = _compat.delete_vector_SDynProg
    __del__ = lambda self : None;
vector_SDynProg_swigregister = _compat.vector_SDynProg_swigregister
vector_SDynProg_swigregister(vector_SDynProg)


def PosNotOfChar(*args):
  return _compat.PosNotOfChar(*args)
PosNotOfChar = _compat.PosNotOfChar

def PosOfChar(*args):
  return _compat.PosOfChar(*args)
PosOfChar = _compat.PosOfChar

def FirstNotN(*args):
  return _compat.FirstNotN(*args)
FirstNotN = _compat.FirstNotN

def SecondNotN(*args):
  return _compat.SecondNotN(*args)
SecondNotN = _compat.SecondNotN

def TakeConstVecVecChar(*args):
  return _compat.TakeConstVecVecChar(*args)
TakeConstVecVecChar = _compat.TakeConstVecVecChar

def TakeNonConstVecVecChar(*args):
  return _compat.TakeNonConstVecVecChar(*args)
TakeNonConstVecVecChar = _compat.TakeNonConstVecVecChar

def ReturnConstVecCharRef(*args):
  return _compat.ReturnConstVecCharRef(*args)
ReturnConstVecCharRef = _compat.ReturnConstVecCharRef

def ReturnNonConstVecCharRef(*args):
  return _compat.ReturnNonConstVecCharRef(*args)
ReturnNonConstVecCharRef = _compat.ReturnNonConstVecCharRef
def PairwiseDisambiguate(s1, s2, nleaves):
    p1 = pair_vector_unsigned_int()
    for i in sorted(s1[0]):
        p1.first.append(i)
    for i in sorted(s1[1]):
        p1.second.append(i)
    p2 = pair_vector_unsigned_int()
    for i in sorted(s2[0]):
        p2.first.append(i)
    for i in sorted(s2[1]):
        p2.second.append(i)
    MutualDisambiguate(p1, p2, nleaves)
    return (tuple(p1.first), tuple(p1.second)), (tuple(p2.first), tuple(p2.second))


# This file is compatible with both classic and new-style classes.


